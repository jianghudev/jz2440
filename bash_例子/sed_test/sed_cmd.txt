读下一行：N
N命令将下一行的内容读取到当前模式空间，但是下n命令不一样的地方是N命令并没有直接输出当前模式空间中的行，
而是把下一行追加到当前模式空间，两行之间用回车符\n连接，如下图所示：

模式空间包含多行之后，正则表达式的^/$符号的意思就变了，^是匹配模式空间的最开始而非行首，$是匹配模式空间的最后位置而非行尾。

删除行：D
该命令删除模式空间中第一行的内容，而它对应的小d命令删除模式空间的所有内容。如果模式空间中内容不为空，D不会导致读入新行，
相反它会回到最初的编辑命令，重要应用在模式空间剩余的内容上。

D命令只会删除模式空间的第一行，而且删除后会重新在模式空间的内容上执行编辑命令，类似形成一个循环，前提是相连的都是空行。当匹配一个空行时，N读取下一行内容，此时匹配^\n$导致模式空间中的第一行被删除。现在模式空间中的内容是空的，重新执行编辑命令，此时匹配/^$/。继续读取下一行，当下一行依然为空行时，重复之前的动作，否则输出当前模式空间的内容。造成的结果是连续多个空行，只有最后一个空行是保留输出的，其余的都被删除了。这样的结果才是我们最初希望得到的。


sed语句默认请使用单引号

sed命令的-n选项的用法：
-n, --quiet, --silent
n选项不打印; sed不写编辑行和未编辑行到标准输出
缺省为打印所有行(编辑和未编辑    每1行执行命令后，不管当前行是否改变，都打印‘执行命令后的结果’)
p命令可以用来打印编辑行（也就是模式空间中的内容）


p命令用于打印模式空间的内容，例如打印list文件的第一行：
$ sed -n '1p' list
John Daggett, 341 King Road, Plymouth MA

上面的内容，大致意思是说：(a)
  ● 对于像“addr1,addr2”这种形式的地址匹配，如果addr1匹配，则匹配成功，“开关”打开，在该行上执行命令，此时不管addr2是否匹配，即使addr2在addr1这一行之前；
  ● 接下来读入下一行，看addr2是否匹配，如果addr2在addr1之前，则不匹配，不执行命令，关闭“开关”；如果addr2匹配，则执行命令，同样开关“关闭”；如果addr2在addr1之后，则一直处理到匹配为止，换句话说，如果addr2一直不匹配，则开关一直不关闭，因此会持续执行命令到最后一行。

Sed一般至少支持以下形式的地址表示：
  1. number: 这一种情况不多说。
  2. first~step: 从first行开始，每隔step行执行一次命令。详细的内容也可以参照手册:
Match every step’th line starting with line first. For example,‘sed -n 1~2p’ will print all the odd-numbered lines in theinput stream, and the address 2~5 will match every fifth line, starting with the second. (This is an extension.)
  3. /regexp/: 同第一种方法类似，不过是匹配该正则的那一行。
在匹配行的时候，$是特殊的标记，匹配最后一行。1匹配第一行，而不是^，这点和正则不大一样。
另外，GNU Sed还支持以下几种特殊的地址对形式：（平常使用的基本是GNU Sed，即gsed）
  1. 0,addr2
这种形式的地址对，默认第一个地址是匹配的，也就是匹配开关打开，直到找到匹配addr2的那行为止，匹配开关关闭。大多数情况下和1, addr2是一样的，除非addr2匹配文件的第一行，在这种时候，0, addr2就在第一行就关闭了，而1, addr2会继续往下找匹配的行。
Start out in "matched first address" state, until addr2 is found. This is similar to 1,addr2, except that if addr2 matches the very first line of input, the 0,addr2 form will be at the end of its range, whereas the 1,addr2 form will still be at the beginning of its range.
可以看一个例子：
$ seq 6 | sed -n '0, /1/p'  # 打印第一行（/1/是正则表达式，因为第一行的内容是1）
为什么不相同呢？ 解释一下：
      ○ 0, addr2 这种形式默认第一个地址是匹配的，然后直到add2匹配为止。因此上述情况，只要看每一行是否匹配第二个地址就可以了addr2，因为第一行是匹配的，所以打印到第一行为止。
      ○ 1, addr2 这种形式就是普通形式，参考（a）红字说明部分，不管addr2匹配与否，第一行是匹配的，然后读入第二行，发现不匹配addr2，继续读，直到最后也没找到匹配，因此打印从第1行到最后一行之间的所有内容。
但是这种地址对表示有一个限制，即addr2只能使用/regex/形式，如果使用行号，就会出错，不信可以试试。
  2. addr1,+N: 从匹配的addr1行开始，连续N行，当然包括addr1这一行。
  3. addr1,~N: 从匹配的addr1行开始，直到某一行，该行的行号是N的倍数为止。
总结
可以总结出几个关键点：
      ○ 地址对addr1, addr2的匹配方式 ，从匹配addr1的那行开始，打开匹配开关，直到匹配addr2的那行结束，关闭匹配开关，之后的行会忽略这个地址对，不再做匹配。(b)
      ○ 地址对addr1, addr2的匹配方式 ，假设addr1是number，即行号，如果新读入行的行号大于addr1，则匹配；小于addr1，则不匹配。(c)
注意：如果addr2是行号，如果新读入行的行号小于addr2，则匹配，继续往下读；大于addr2，则不匹配，关闭匹配开关。刚好与上面的情况相反（这个比较好理解，可以辅助记住(c)这种情况）。

最后引用chinaunix上的那个帖子的问题，以下两种情况结果为什么会不一样：
$ seq 6 | sed '1,2d' | sed '1,2d'  # 结果返回5 6
$ seq 6 | sed -e '1,2d' -e '1,2d' # 结果返回4 5 6
显然这两种情况使用sed的命令形式是不一样的，第一种利用管道使用了sed两次，结果返回5 6，没什么问题；第二种情况在同一个sed命令中使用了两次1,2d，按常理应该是返回 3 4 5 6，结果返回 4 5 6，第3行竟然也被意外地删除了，为什么呢？
解释：
  1. 首先第一行被读入，遇到第一组expression -> 1, 2d，第一行匹配成功（打开匹配开关），执行d命令，d命令清空模式空间的内容，因此不会再执行接下来的命令。
  2. 继续从标准输入读入第二行，同1
  3. 读入第三行，第一组expression匹配失败（因为3>2），因此试着执行第二组expersson->1,2d，因为3>1，打开匹配开关，执行d。（这里是关键）
  4. 读入第四行，执行第二组expersson->1,2d，因为4>2，匹配失败，关闭匹配开关，同时也不执行d。
  5. 因此，最后第1 2 3行被删除。




通常来说，一行被读进模式空间，并且用脚本中的每个命令(一个接一个地)应用于该行。当到达脚本底部时，输出这一行，并清空模式空间。然后新行被读入模式空间，并且控制被转移回脚本的顶端。
也就是说，一般情况下，行的读入，命令的执行都是按照流程一步步来的。当然基础部分也有两个例外，可以改变流程。
一个是d命令，d命令将会清空模式空间，并导致读入新的输入行，此时控制将忽略d之后的命令，并转移到脚本的顶端作用在新输入行上。
第二个是n命令，可以说n命令和d命令有一点点类似，不同的是n命令执行的时候，会读入下一行替换当前行，替换之前会把当前行输出。而替换之后，n命令之后的命令会作用到新行上

sed命令中可以包含0个、1个或者2个地址（地址对），地址可以为正则表达式（如/Sebastopol/），
行号或者特殊的行符号（如$表示最后一行）：
  ● 如果没有指定地址，默认将编辑命令应用到所有行；
  ● 如果指定一个地址，只将编辑命令应用到匹配该地址的行；
  ● 如果指定一个地址对（addr1,addr2)，则将编辑命令应用到地址对中的所有行（包括起始和结束）；
  ● 如果地址后面有一个感叹号（！），则将编辑命令应用到不匹配该地址的所有行；

由此可见，sed并非是将一个编辑命令分别应用到每一行，然后再取下一个编辑命令。恰恰相反，sed是以行的方式来处理的。另外一方面，每一行都是被读入到一块缓存空间，该空间名为模式空间(pattern space)，这是一个很重要的概念，在后文中会多次被提及。因此sed操作的都是最初行的拷贝，同时后续的编辑命令都是应用到前面的命令编辑后输出的结果，所以编辑命令之间的顺序就显得格外重要。


SED主要进行增删改查的操作
AWK主要进行加减乘除的运算

sed的作用主要是用来在多个文件中查找替换
find ./ -iname "*config*" | xargs sed -i "s/10.46.39.242/10.46.8.44/g"
把搜索到的文件中的ip地址为10.46.39.242修改为10.46.8.44新的IP地址
awk的作用主要是用来对查找到的文件中的字段进行运算
sed -n "2p" data.txt   ////只打印第2行
sed -n "1，4{=;p}"  data.txt  打印文件中的第1行和第4行，并且打印行号（不同的编辑命令之间用;来隔开）
sed -n "1，4！p"  data.txt  打印文件中的除了第1行和第4行的所有行，！表示对匹配模式取反
sed -n "/hello/，4p"  data.txt  打印文件中的匹配hello的行到第4行之间的所有行，如果hello在4行之后，就只打印第4行

#######sed的匹配模式支持正则表达式#####################
sed'5 q'/etc/passwd#打印前5行
sed-n '/r*t/p'/etc/passwd#打印匹配r有0个或者多个，后接一个t字符的行
sed-n '/.r.*/p'/etc/passwd#打印匹配有r的行并且r后面跟任意字符
sed-n '/o*/p'/etc/passwd#打印o字符重复任意次
sed-n '/o\{1,\}/p'/etc/passwd#打印o字重复出现一次以上
sed-n '/o\{1,3\}/p'/etc/passwd#打印o字重复出现一次到三次之间以上

####用sed打印文件的信息的例子的命令######
sed -n '/^#/!p'  /etc/vsftpd/vsftpd.conf      过滤掉#开头的行，其它的行都打印出来 
sed -n '/^#/!{/^$/!p}'  /etc/vsftpd/vsftpd.conf 过滤掉#开头的行和空行，其它的行都打印出来 
sed -e '/^#/d' -e '/^$/d'  /etc/vsftpd/vsftpd.conf  过滤掉#开头的行和空行，其它的行都打印出来
sed -n '1,/adm/p' /etc/passwd    打印从第1行到 匹配adm的行（第4行）
sed -n '/adm/,6p' /etc/passwd    打印从匹配adm的行（第4行）到第6行
sed -n '/adm/,4p' /etc/passwd	 打印从匹配adm的行（第4行）到第4行（就是只打印第4行）
sed -n '/adm/,2p' /etc/passwd	打印从匹配adm的行（就是只打印第4行） （第2行在之前，匹配结束）
###以下图片是对这些sed命令例子的解释和显示结果

$cat myfile
this is the header line
this is the first line
this is the second line
this is the last line
####用sed打印文件的信息的例子的命令######
sed -n '/world/s/^/+ /'  myfile        匹配world的行，在它的行开关添加个+字符 
sed -n 's/linux/super &/'  myfile        匹配linux的行，把它替换为super linux 
sed -n 's/linux/& super/'  myfile        匹配linux的行，把它替换为linux super 
sed -n '/linux/s/$/ end/'  myfile        匹配linux的行，在它的结尾添加end字符 
sed -n '/linux/s/\(.*\)/\1 end/g'  myfile   匹配linux的行，在它的结尾添加end字符 
                      \(.*\)代表任意官字符 \1代表第1个分组
sed -n '/linux/i ni hao'  myfile        匹配linux的行，在它的前面添加1行ni hao的行
sed -n '/linux/i\ni hao'  myfile        匹配linux的行，在它的前面添加1行ni hao的行
sed -n '/linux/i/ni hao'  myfile        匹配linux的行，在它的前面添加1行/ni hao的行,不要这样写
sed -n '/linux/i ni hao/p'  myfile        匹配linux的行，在它的前面添加1行ni hao/p的行,
                     a命令不能加/p选项，只有s命令才能加/p选项

sed -n '/linux/a\ hello'  myfile        匹配linux的行，在它的后面添加1行hello的行
sed -n '/linux/a\ hello\n world'  myfile        匹配linux的行，在它的后面添加2行hello world的行


打印从匹配first的行(第2行)到匹配header的行(从第2行开始，header永远匹配不到，所以打印第2行到结尾行)
而不是仅仅只打印第2行
sed -n '/first/,/header/p' myfile  
this is the first line 
this is the second line 
this is the last line 

默认情况下s命令不要加/p选项，不然会导致它多打印1个多余的行,要加/g它才会匹配所有的
sed  's/^/start /'  myfile        在行的开头添加start 字符,只打印1行,所有行
sed  's/^/start /p'  myfile        在行的开头添加start 字符,匹配行会打印2次。sed默认会打印所有行
start this is the header line
start this is the header line
start this is the first line
start this is the first line
start this is the second line
start this is the second line
start this is the last line
start this is the last line
sed -n 's/^/start /p'  myfile        在行的开头添加start 字符,会打印1次 -n会只打印匹配的行
sed -i 's/$/ end/'  myfile        在行的结尾添加 end字符,会打印所有的行
sed -i 's#line#& & &#g'  myfile     把文件中的所有line都换成3个line,它的定界符是#,而不是默认的/，匹配路径很有用
this is the header line line line
this is the first line line line
this is the second line line line
this is the last line line line
sed -i 's#line#hello#2g'  myfile 把每行中匹配的第2个以及之后的line都换成hello,不仅仅只替换第2个
this is the header line hello hello 
this is the first line hello hello 
this is the second line hello hello 
this is the last line hello hello 
sed -i 's#line#hello#3p'  myfile 把每行中匹配的第3个line都换成hello,其它的不变,并复制本行
sed -i 's#line#hello#4p'  myfile 把每行中匹配的第4个line都换成hello,其它的不变,并复制本行
sed -i 's#line#hello#5p'  myfile 把每行中匹配的第5个line都换成hello,其它的不变,并复制本行
this is the header line hello line
this is the header line hello line
this is the first line hello line
this is the first line hello line
this is the second line hello line
this is the second line hello line
this is the last line hello line
this is the last line hello line
sed -i 's#line#hello#2'  myfile 把每行中匹配的第2个line都换成hello,其它的不变
this is the header line hello line
this is the first line hello line
this is the second line hello line
this is the last line hello line

sed  's/first/hello/'  myfile       把文件中的first换成hello,默认会打印所有行
sed  's/first/hello/p'  myfile      把文件中的first换成hello,默认会打印所有行,再加上匹配的行
sed -n 's/first/hello/p'  myfile    把文件中的first换成hello,只打印匹配的行
sed -n 's/first/hello/'  myfile     错误

sed -i 's/is/IS/g'  myfile 把文件中所有的is都换成IS,普通匹配 this is都会变成thIS IS
sed -i 's/\<is\>/IS/g'  myfile 把文件中所有单词is都换成IS,全字匹配 this不变，而is变成IS

sed -e '/first/d' -e '/second/d' myfile 删除文件中匹配/first以及匹配/second的行

sed  '/st/{s/first/FIRST/;s/last/LAST/;}' myfile 有2个或n个命令可以用{}来实现


$name=sylar 在shell中定义1个变量name，值为li
$sed "s/first/$name/g" myfile   把匹配first的字串换成sylar字串
$sed '$a\ '$name'' myfile   在文件的最后添加1行sylar字串，sed语句和变量都使用单引号

sed  's/first/FIRST/w tmp.txt'  myfile  把first换成FIRST,并把当前的行写入tmp.txt文件
$cat tmp.txt
this is the FIRST line

sed  '/second/r tmp.txt'  myfile  在匹配second的行之后加入tmp.txt的内容

sed  '/first/{n;/second/d;}' myfile 找到匹配first行，读入它的下1行，如果匹配second就删除它
                     			   其实它的作用就是直接删除匹配second的行
###以下图片是对这些sed命令例子的解释和显示结果


sed的处理流程，简化后是这样的：
1.读入新的一行内容到缓存空间；
2.从指定的操作指令中取出第一条指令，判断是否匹配pattern；
3.如果不匹配，则忽略后续的编辑命令，回到第2步继续取出下一条指令；
4.如果匹配，则针对缓存的行执行后续的编辑命令；完成后，回到第2步继续取出下一条指令；
5.当所有指令都应用之后，输出缓存行的内容；回到第1步继续读入下一行内容；
6.当所有行都处理完之后，结束；


