subprojects{
    repositories{
        jcenter()
    }
}



task hello1 << {
    println 'hello1' 
}
task hello2 {
    doLast{
        println 'hello2' 
    }
}

task hello3  {
    doFirst{
        println 'hello3' 
    }
}

task showtask << {
    println tasks.class
    println tasks.size()
}


//// gradle showtask


tasks.create(name: 'hello4') << {
    println 'hello4' 
}

///// gradle hello4


task hello5(dependsOn: hello4) << {
    println  "hello5"    
}

///// gradle hello5

task hello6() << {
    println  "hello6"    
}
hello6.dependsOn hello5




task hello7() << {
    description = "this is hello7"
    println  description
}

///// gradle hello7

task hello8() << {
    println  description
}
hello8() {
    description = "this is hello8"
}

///// gradle hello8


task hello9() << {
    println  description
}
hello9() {
    description = "this is hello9"
}

///// gradle hello9

task wrapper(type: Wrapper){
    gradleVersion = '2.4'
}

task log1(){
    logger.quiet('quiet message !');
    logger.error('error message !');
    logger.warn('warn message !');
    logger.lifecycle('lifecycle message !');
    logger.info('info message !');
    logger.debug('debug message !');
}


task printStringVar << {
    def name = 'jianghu'
    println '单引号的结果为： ${name} ' ;
    println "双引号的结果为： ${name} "
}

task printlist  <<{
    def numlist = [1, 2,3,4,5,6]
    println numlist.getClass().name
    println numlist[1];
    println numlist[-1];
    println numlist[-2];
    println numlist[1..4];
    numlist.each{
        println it
    }
}

task printmap <<{
    def map1 = ['width':1024, 'height':768]
    println map1.getClass().name
    println map1['width']
    println map1.height

    map1.each {
        println "key=" + it.key +" value="+ it.value
    }
}

task invokemethod << {
    method1(1,2)
    method1 1,2
}
def method1(int a, int b){
    println a+b;
}

task print_return_value << {
    def add1 = method2 1,2
    def add2 = method2 5,3
    println "add1="+add1 + " add2="+add2
}
def method2(int a,int b){
    if(a>b){
        a
    }else{
        b
    }
}

task hello_closure << {
    custom_each {
        println it
    }
}
def custom_each(Closure c){
    for(int i in 1..12){
       // closure(i)
       c(i)
    }
}

task hello_2_args_closure <<{
    eachmap {
        k,v -> println "key=" + k + " value="+ v
    }
}
def eachmap(closure){
    def map1 = [name:'jianghu',age:34]
    map1.each{
        closure(it.key,it.value)
    }

}

task hello_delegate << {
    new Delegate().test{
        println "thisObject= "+ thisObject.getClass();
        println "owner= "+ owner.getClass();
        println "delegate= "+ delegate.getClass();
        delegate_method1()
        it.delegate_method1()

    }
}
def delegate_method1(){
    println "context this:"+ this.getClass() + " in root"
    println "method1 in root"
}

class Delegate{
    def delegate_method1(){
        println "delegate this:"+ this.getClass() + " in delegate"
        println "method1 in delegate"
    }
    def test(Closure<Delegate> closure){
        closure(this)
    }
}



class enclosing{
    void run(){
        def thisObject_1 = {
            getThisObject()
        }
        println thisObject_1()
    }
}
task print_enclosing <<{
    new enclosing().run()
}





class myOwner{
    String name;
    def p= new person(name:'Lisi')
    def t= new thing(name:'Phone')
    def upperCaseName = {delegate.name.toUpperCase() }

    void run(){
        upperCaseName.delegate= p
        println upperCaseName()
        upperCaseName.delegate= t
        println upperCaseName()
    }
    class person{
        String name;
    }

    class thing{
        String name;
    }
}

task hello_delegate_owner_first << {
    new myOwner().run()
}

class owner_first_delegate_first{
    class person{
        String name
        int age
        def fetch_age = {age}
    }
    class thing{
        String name
    }
    void run(){
        def p= new person(name:'lisi',age:20)
        def t= new thing(name:'book')
        def cl=p.fetch_age;
        cl.delegate=p;
        println cl()
        cl.delegate=t;
        println cl()
        cl.resolveStrategy = Closure.DELEGATE_ONLY
        cl.delegate=p;
        println cl()
        cl.delegate=t;
        try{
            cl()
            assert false
        }catch(Exception e){
            println "age is not defined"
        }
        
    }
}

task hello_owner_first_delegate_first << {
    new owner_first_delegate_first().run()
}


task config_closure << {
    person {
        name = 'lisi'
        age = 20
        dump_person()
    }
}

class myPerson{
    String name
    int age
    def dump_person(){
        println "name="+ name + " age="+ age;
    }
}
def person(closure){
    //myPerson my_p = new myPerson();
    def my_p = new myPerson();
    int aa = 3;
    closure.delegate =my_p;
    closure.setResolveStrategy(Closure.DELEGATE_FIRST)
    closure(my_p);
    //closure();
}



/*************************************************************************/
task simple_task1{
    doFirst{
        println simple_task1.name+" doFirst"
    }
    doLast{
        println simple_task1.name+" doLast"
    }
}

tasks.create('simple_task2'){
    doFirst{
        println simple_task2.name+" doFirst"
    }
    doLast{
        println simple_task2.name+" doLast"
    }
}


task ex35hello << {
    println ex35hello.name+ " haha"
}
task ex35world << {
    println ex35world.name+ " haha"
}
task ex35main(){
    dependsOn ex35hello, ex35world
    doLast{
        println ex35main.name + " end"
    }
}

ex35hello.doFirst{
    println "ex35hello"+ " dofirst"
}
ex35hello.doLast{
    println project.hasProperty('ex35hello')
    println "ex35hello"+ "doLast"
}

ext.ext_age =18
ext {
    ext_phone = 222221;
    ext_address = 'shanghai'
}

apply plugin: 'java'

sourceSets.all {
    ext.resourceDir =null;
}
sourceSets{
    main{
        resourceDir = 'main/res'
    }
    test{
        resourceDir = 'test/res'
    }
}

task ext_prop << {
    println "age="+ ext_age
    println "phone="+ ext_phone
    println "address="+ ext_address
    sourceSets.each{
        println it.name + "的resourceDir是 "+ it.resourceDir
    }
// ext_prop.type   ext_prop.overwrite ext_prop.action
    println "" + ext_prop.group    + ext_prop.dependsOn +  ext_prop.description ;
}


task my42accessTask << {
    println my42accessTask.name + " main process"
}

tasks['my42accessTask'].doLast{
    println my42accessTask.name + " dolast"
    println tasks.findByPath('ext_prop');
    println tasks.getByPath('my42accessTask');
    println tasks.findByPath('xxxxxxxxxxx');

    println tasks.findByName('ext_prop');
    println tasks.getByName('my42accessTask');
    println tasks.findByName('xxxxxxxxxxx');
}

def Task jh_task_group_desc = task(jh_task_group_desc)
jh_task_group_desc.group = BasePlugin.BUILD_GROUP
jh_task_group_desc.description = '这是1个构建的引导任务'
jh_task_group_desc.doLast {
    println "group:" + group +" description: "+ description
}



task jh_group_desc_2   {
    group = BasePlugin.BUILD_GROUP
    description = "这是另外1个任务"
    doLast{
        println "group:" + group +" description: "+ description
    }
}

jh_group_desc_2.doLast{
    println 'doLast func'
}


task first_self_last(type:my_class_action) {
    doFirst{
        println 'exec do first!'
    }
    doLast{
        println 'exec do last!'
    }
}

class my_class_action extends DefaultTask {
    @TaskAction
    def doSelf(){
        println 'exec do self!'
    }
}




